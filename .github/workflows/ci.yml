name: Fp-Admin CI

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]

env:
  PYTHON_VERSION: "3.12"
  UV_CACHE_DIR: ~/.cache/uv

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v5

    - name: Set up Python
      run: uv python install ${{ env.PYTHON_VERSION }}

    - name: Cache uv dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/uv
          .venv
        key: ${{ runner.os }}-uv-${{ hashFiles('uv.lock') }}
        restore-keys: |
          ${{ runner.os }}-uv-

    - name: Install dependencies
      run: uv sync --locked --all-extras --dev

    - name: Run pre-commit
      run: uv run pre-commit run --all-files --show-diff-on-failure

  test-setup:
    runs-on: ubuntu-latest
    needs: lint
    outputs:
      cache-key: ${{ steps.cache-key.outputs.value }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v5

    - name: Set up Python
      run: uv python install ${{ env.PYTHON_VERSION }}

    - name: Generate cache key
      id: cache-key
      run: echo "value=${{ hashFiles('uv.lock', 'pyproject.toml') }}" >> $GITHUB_OUTPUT

    - name: Cache uv dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/uv
          .venv
        key: ${{ runner.os }}-uv-${{ steps.cache-key.outputs.cache-key }}
        restore-keys: |
          ${{ runner.os }}-uv-

    - name: Install dependencies
      run: uv sync --locked --all-extras --dev

    - name: Set up database
      run: |
        uv run fp-admin make-migrations ci_setup
        uv run fp-admin migrate

    - name: Cache test database
      uses: actions/cache@v4
      with:
        path: |
          migrations/
          *.sqlite3
        key: ${{ runner.os }}-db-${{ steps.cache-key.outputs.cache-key }}
        restore-keys: |
          ${{ runner.os }}-db-

  unit-tests:
    runs-on: ubuntu-latest
    needs: test-setup
    strategy:
      matrix:
        python-version: ["3.12"]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v5

    - name: Set up Python
      run: uv python install ${{ matrix.python-version }}

    - name: Cache uv dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/uv
          .venv
        key: ${{ runner.os }}-uv-${{ needs.test-setup.outputs.cache-key }}
        restore-keys: |
          ${{ runner.os }}-uv-

    - name: Install dependencies
      run: uv sync --locked --all-extras --dev

    - name: Restore test database
      uses: actions/cache@v4
      with:
        path: |
          migrations/
          *.sqlite3
        key: ${{ runner.os }}-db-${{ needs.test-setup.outputs.cache-key }}
        restore-keys: |
          ${{ runner.os }}-db-

    - name: Run unit tests
      run: uv run pytest -m unit tests/unit -v --tb=short --maxfail=10

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: unit-test-results
        path: |
          .pytest_cache/
          test-results.xml
        retention-days: 7

  # integration-tests:
  #   runs-on: ubuntu-latest
  #   needs: test-setup
  #   strategy:
  #     matrix:
  #       python-version: ["3.12"]
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4

  #   - name: Install uv
  #     uses: astral-sh/setup-uv@v5

  #   - name: Set up Python
  #     run: uv python install ${{ matrix.python-version }}

  #   - name: Cache uv dependencies
  #     uses: actions/cache@v4
  #     with:
  #       path: |
  #         ~/.cache/uv
  #         .venv
  #       key: ${{ runner.os }}-uv-${{ needs.test-setup.outputs.cache-key }}
  #       restore-keys: |
  #         ${{ runner.os }}-uv-

  #   - name: Install dependencies
  #     run: uv sync --locked --all-extras --dev

  #   - name: Restore test database
  #     uses: actions/cache@v4
  #     with:
  #       path: |
  #         migrations/
  #         *.sqlite3
  #       key: ${{ runner.os }}-db-${{ needs.test-setup.outputs.cache-key }}
  #       restore-keys: |
  #         ${{ runner.os }}-db-

  #   - name: Run integration tests
  #     run: uv run pytest tests/integration -v --tb=short --maxfail=10

  #   - name: Upload test results
  #     uses: actions/upload-artifact@v4
  #     if: always()
  #     with:
  #       name: integration-test-results
  #       path: |
  #         .pytest_cache/
  #         test-results.xml
  #       retention-days: 7

  e2e-tests:
    runs-on: ubuntu-latest
    needs: test-setup
    strategy:
      matrix:
        python-version: ["3.12"]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v5

    - name: Set up Python
      run: uv python install ${{ matrix.python-version }}

    - name: Cache uv dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/uv
          .venv
        key: ${{ runner.os }}-uv-${{ needs.test-setup.outputs.cache-key }}
        restore-keys: |
          ${{ runner.os }}-uv-

    - name: Install dependencies
      run: uv sync --locked --all-extras --dev

    - name: Restore test database
      uses: actions/cache@v4
      with:
        path: |
          migrations/
          *.sqlite3
        key: ${{ runner.os }}-db-${{ needs.test-setup.outputs.cache-key }}
        restore-keys: |
          ${{ runner.os }}-db-

    - name: Run e2e tests
      run: uv run pytest tests/e2e -v --tb=short --maxfail=10

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-test-results
        path: |
          .pytest_cache/
          test-results.xml
        retention-days: 7

  test-summary:
    runs-on: ubuntu-latest
    needs: [unit-tests, e2e-tests]
    if: always()
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v5

    - name: Set up Python
      run: uv python install ${{ env.PYTHON_VERSION }}

    - name: Cache uv dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/uv
          .venv
        key: ${{ runner.os }}-uv-${{ needs.test-setup.outputs.cache-key }}
        restore-keys: |
          ${{ runner.os }}-uv-

    - name: Install dependencies
      run: uv sync --locked --all-extras --dev

    - name: Download all test results
      uses: actions/download-artifact@v4
      with:
        path: test-results/

    - name: Run all tests for coverage
      run: uv run pytest tests -v --cov=fp_admin --cov-report=xml --cov-report=html --cov-report=term-missing

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: |
          htmlcov/
          coverage.xml
        retention-days: 30

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: alltests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    runs-on: ubuntu-latest
    needs: lint
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v5

    - name: Set up Python
      run: uv python install ${{ env.PYTHON_VERSION }}

    - name: Cache uv dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/uv
          .venv
        key: ${{ runner.os }}-uv-${{ hashFiles('uv.lock') }}
        restore-keys: |
          ${{ runner.os }}-uv-

    - name: Install dependencies
      run: uv sync --locked --all-extras --dev

    - name: Run security checks
      run: |
        uv run bandit -r fp_admin/ -f json -o bandit-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
        retention-days: 30
